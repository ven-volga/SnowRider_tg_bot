from aiogram import types, Dispatcher
from create_bot import dp, bot
from informations.resorts_info import resorts_info
from keyboards import kb_resorts, kb_service
from functions.parce_hotels24 import parse_hotels, recommend_hotels, average_price
from functions.resorts_info import get_resort_info
from functions.weather import get_current_weather, get_future_weather
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

resort = None


async def command_start(message: types.Message):
    global resort
    resort = None
    await bot.send_message(message.chat.id,
                           f"–ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.first_name} {message.from_user.last_name}</b>, –º–∞—é –Ω–∞ –º–µ—Ç—ñ "
                           f"–¥–æ–ø–æ–º–æ–≥–∏ —Ç–æ–±—ñ –≤–∏–∑–Ω–∞—á–∏—Ç–∏—Å—å –¥–µ –∫–∞—Ç–∞—Ç–∏ –≤ —Ü—å–æ–º—É —Ä–æ—Ü—ñ.\nÔ∏è <b>–¢–∏—Å–Ω–∏ –Ω–∞ –∫—É—Ä–æ—Ä—Ç —ñ –æ–±–∏—Ä–∞–π, "
                           f"—â–æ —Ü—ñ–∫–∞–≤–∏—Ç—å </b>‚¨áÔ∏è",
                           reply_markup=kb_resorts, parse_mode='html')


async def command_resorts(message: types.Message):
    global resort
    resort = message.text
    await bot.send_message(message.chat.id, f"–ê —è –∫–∞—Ç–∞–≤ {resort}, –Ω–µ–ø–µ—Ä–µ–≤–µ—Ä—à–µ–Ω–æ!\n"
                                            f"<b>–ü—Ä–æ —â–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏?</b>", reply_markup=kb_service, parse_mode='html')


async def command_hotels(message: types.Message):
    await bot.send_message(message.chat.id, f"<b>–®—É–∫–∞—é —ñ–Ω—Ñ–æ –ø–æ –∂–∏—Ç–ª—É —É {resort}.</b>\n"
                                            f"–ê –ø–æ–∫–∏ —è –æ–±—Ä–æ–±–ª—è—é –¥–ª—è —Ç–µ–±–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ–º—ñ—Ä–∫—É–π... "
                                            f"–•—Ç–æ –∫—Ä–∞—â–µ, —Å–Ω–æ—É–±–æ—Ä–¥–∏—Å—Ç —á–∏ –ª–∏–∂–Ω–∏–∫ üòâ", parse_mode='html')

    # TODO use function average, min, max in bot answer
    prices = parse_hotels(resort)[1]

    hotels_kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text=f"–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó", callback_data='recommend_hotels'))

    await bot.send_message(message.chat.id,
                           f"–°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è (1 –Ω—ñ—á –Ω–∞ 2 –æ—Å–æ–±–∏) —É {resort} "
                           f"—Å–∫–ª–∞–¥–∞—î: {sum(prices) / len(prices)} –≥—Ä–Ω.\n\n"
                           f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö - {min(prices)} –≥—Ä–Ω.\n"
                           f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö - {max(prices)} –≥—Ä–Ω.\n\n",
                           reply_markup=hotels_kb, parse_mode='html')


async def command_recommends(callback: types.CallbackQuery):
    url_kb = InlineKeyboardMarkup(row_width=1)
    url_btn = InlineKeyboardButton(text="–ù–∞ —Å–∞–π—Ç Hotels24.ua", url=resorts_info['hotels_links'][resort])
    url_kb.add(url_btn)

    await callback.message.answer(f"{recommend_hotels(resort)}", reply_markup=url_kb, parse_mode='html')
    await callback.answer()


async def command_resorts_info(message: types.Message):
    await bot.send_message(message.chat.id, get_resort_info(resort), reply_markup=kb_service,
                           parse_mode='html')


async def command_weather(message: types.Message):
    await bot.send_message(message.chat.id, get_current_weather(resort),
                           reply_markup=kb_service, parse_mode='html')

    await bot.send_message(message.chat.id, get_future_weather(resort),
                           reply_markup=kb_service, parse_mode='html')


async def command_equipment(message: types.Message):
    await bot.send_message(message.chat.id,
                           f"–Ü–Ω—Ñ–æ –ø–æ –µ–∫—ñ–ø—É –≤ {resort} –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ, —è–∫ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è —Å—Ç–∞—Ä—Ç —Å–µ–∑–æ–Ω—É! "
                           f"–ó–Ω–∞—é, —É –º–µ–Ω–µ –≤–∂–µ —Ç–µ–∂ –Ω–æ–≥–∏ —Å–≤–µ—Ä–±–ª—è—Ç—å, –ø–æ—Ç–µ—Ä–ø–∏ –ø–æ–∫–∏ –≤–∏–ø–∞–¥–µ —Å–Ω—ñ–≥ —ñ –º–∏ –∑–∞–ø–∏–∑–¥*—á–∏–º–æ –æ–∫—É–ø–∞–Ω—Ç—ñ–≤!",
                           reply_markup=kb_service, parse_mode='html')


async def command_skipass(message: types.Message):
    await bot.send_message(message.chat.id,
                           f"–Ü–Ω—Ñ–æ –ø–æ —Å–∫—ñ–ø–∞—Å–∞–º –≤ {resort} –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ, —è–∫ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è —Å—Ç–∞—Ä—Ç —Å–µ–∑–æ–Ω—É! "
                           f"–ó–Ω–∞—é, —É –º–µ–Ω–µ –≤–∂–µ —Ç–µ–∂ –Ω–æ–≥–∏ —Å–≤–µ—Ä–±–ª—è—Ç—å, –ø–æ—Ç–µ—Ä–ø–∏ –ø–æ–∫–∏ –≤–∏–ø–∞–¥–µ —Å–Ω—ñ–≥ —ñ –º–∏ –∑–∞–ø–∏–∑–¥*—á–∏–º–æ –æ–∫—É–ø–∞–Ω—Ç—ñ–≤!",
                           reply_markup=kb_service, parse_mode='html')


async def command_trains(message: types.Message):
    await bot.send_message(message.chat.id, f"–í –ø—Ä–æ—Ü–µ—Å—ñ, —Å–∫–æ—Ä–æ —ñ–Ω—Ñ–æ, —è–∫ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–æ {resort}", reply_markup=kb_service,
                           parse_mode='html')


def register_handler_client(dp: Dispatcher):  # —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ —É —Ñ–∞–π–ª—ñ
    dp.register_message_handler(command_start, lambda message: message.text in ["/start", "help", "info", "–ù–∞–∑–∞–¥"])
    dp.register_message_handler(command_resorts,
                                lambda message: message.text in ["–°–ª–∞–≤—Å—å–∫–µ", "–î—Ä–∞–≥–æ–±—Ä–∞—Ç", "–ë—É–∫–æ–≤–µ–ª—å", "–ü–∏–ª–∏–ø–µ—Ü—å",
                                                                 "–ü–ª–∞–π", "–Ø–±–ª—É–Ω–∏—Ü—è",
                                                                 "–ö—Ä–∞—Å—ñ—è", "–ú–∏–≥–æ–≤–µ", "–Ø—Ä–µ–º—á–µ"])
    dp.register_message_handler(command_hotels, lambda message: "–ñ–∏—Ç–ª–æ" in message.text)
    dp.register_message_handler(command_resorts_info, lambda message: "–ü—Ä–æ –∫—É—Ä–æ—Ä—Ç" in message.text)
    dp.register_message_handler(command_weather, lambda message: "–ü–æ–≥–æ–¥–∞" in message.text)
    dp.register_message_handler(command_equipment, lambda message: "–°–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è" in message.text)
    dp.register_message_handler(command_skipass, lambda message: "Ski-pass" in message.text)
    dp.register_message_handler(command_trains, lambda message: "–ü–æ—ó–∑–¥–∏" in message.text)
    dp.register_callback_query_handler(command_recommends, text='recommend_hotels')
